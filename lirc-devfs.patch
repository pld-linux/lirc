diff -Nur lirc-0.6.3.orig/drivers/lirc_dev/lirc_dev.c lirc-0.6.3/drivers/lirc_dev/lirc_dev.c
--- lirc-0.6.3.orig/drivers/lirc_dev/lirc_dev.c	Sat Dec 23 12:23:57 2000
+++ lirc-0.6.3/drivers/lirc_dev/lirc_dev.c	Sun Aug 12 18:36:52 2001
@@ -13,7 +13,7 @@
 #endif
  
 #include <linux/version.h>
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,4,0)
+#ifdef CONFIG_DEVFS_FS
 #define LIRC_HAVE_DEVFS
 #endif
 
diff -Nur lirc-0.6.3.orig/drivers/lirc_parallel/lirc_parallel.c lirc-0.6.3/drivers/lirc_parallel/lirc_parallel.c
--- lirc-0.6.3.orig/drivers/lirc_parallel/lirc_parallel.c	Sun Aug 12 14:15:45 2001
+++ lirc-0.6.3/drivers/lirc_parallel/lirc_parallel.c	Sun Aug 12 18:48:52 2001
@@ -51,6 +51,9 @@
 #include <linux/poll.h>
 #include <linux/parport.h>
 #endif
+#ifdef CONFIG_DEVFS_FS
+#include <linux/devfs_fs_kernel.h>
+#endif
 
 #include "drivers/lirc.h"
 
@@ -87,6 +90,10 @@
 int is_claimed=0;
 #endif
 
+#ifdef CONFIG_DEVFS_FS
+static devfs_handle_t lirc_devfs;
+#endif
+
 /***********************************************************************
  *************************   Interne Funktionen  ***********************
  ***********************************************************************/
@@ -853,9 +860,19 @@
 	parport_release(ppdevice);
  skip_init:
 #endif
+#ifdef CONFIG_DEVFS_FS
+	lirc_devfs = devfs_register(NULL, "lirc/parallel", DEVFS_FL_DEFAULT,
+				    LIRC_MAJOR, 0,
+				    S_IFCHR | S_IRUSR | S_IWUSR, &lirc_fops,
+				    NULL);
+	if (lirc_devfs == NULL) {
+		printk(KERN_NOTICE LIRC_DRIVER_NAME
+		       ": devfs_register() failed\n");
+#else
 	if(register_chrdev(LIRC_MAJOR, LIRC_DRIVER_NAME, &lirc_fops)<0)
 	{
 		printk(KERN_NOTICE "%s: register_chrdev() failed\n",LIRC_DRIVER_NAME);
+#endif
 #ifdef KERNEL_2_2
 		parport_unregister_device(ppdevice);
 #else
@@ -875,6 +892,10 @@
 #else
 	release_region(port,LIRC_PORT_LEN);
 #endif
+#ifdef CONFIG_DEVFS_FS
+	devfs_unregister(lirc_devfs);
+#else
 	unregister_chrdev(LIRC_MAJOR,LIRC_DRIVER_NAME);
+#endif
 }
 #endif
diff -Nur lirc-0.6.3.orig/drivers/lirc_serial/lirc_serial.c lirc-0.6.3/drivers/lirc_serial/lirc_serial.c
--- lirc-0.6.3.orig/drivers/lirc_serial/lirc_serial.c	Sun Aug 12 14:15:45 2001
+++ lirc-0.6.3/drivers/lirc_serial/lirc_serial.c	Sun Aug 12 18:48:41 2001
@@ -61,6 +61,9 @@
 #ifdef KERNEL_2_1
 #include <linux/poll.h>
 #endif
+#ifdef CONFIG_DEVFS_FS
+#include <linux/devfs_fs_kernel.h>
+#endif
 
 #include <asm/system.h>
 #include <asm/segment.h>
@@ -106,6 +109,10 @@
 static int major = LIRC_MAJOR;
 static int sense = -1;   /* -1 = auto, 0 = active high, 1 = active low */
 
+#ifdef CONFIG_DEVFS_FS
+static devfs_handle_t lirc_devfs;
+#endif
+
 #ifdef KERNEL_2_3
 static DECLARE_WAIT_QUEUE_HEAD(lirc_wait_in);
 #else
@@ -914,9 +921,18 @@
 
 	if ((result = init_port()) < 0)
 		return result;
+#ifdef CONFIG_DEVFS_FS
+	lirc_devfs = devfs_register(NULL, "lirc/serial", DEVFS_FL_DEFAULT,
+				    major, 0, S_IFCHR | S_IRUSR | S_IWUSR,
+				    &lirc_fops, NULL);
+	if (lirc_devfs == NULL) {
+		printk(KERN_ERR  LIRC_DRIVER_NAME
+		       ": devfs_register failed!\n");
+#else
 	if (register_chrdev(major, LIRC_DRIVER_NAME, &lirc_fops) < 0) {
 		printk(KERN_ERR  LIRC_DRIVER_NAME  
 		       ": register_chrdev failed!\n");
+#endif
 		release_region(port, 8);
 		return -EIO;
 	}
@@ -926,7 +942,11 @@
 void cleanup_module(void)
 {
 	release_region(port, 8);
+#ifdef CONFIG_DEVFS_FS
+	devfs_unregister(lirc_devfs);
+#else
 	unregister_chrdev(major, LIRC_DRIVER_NAME);
+#endif
 #       ifdef DEBUG
 	printk(KERN_INFO  LIRC_DRIVER_NAME  ": cleaned up module\n");
 #       endif
diff -Nur lirc-0.6.3.orig/drivers/lirc_sir/lirc_sir.c lirc-0.6.3/drivers/lirc_sir/lirc_sir.c
--- lirc-0.6.3.orig/drivers/lirc_sir/lirc_sir.c	Wed Feb 28 18:04:20 2001
+++ lirc-0.6.3/drivers/lirc_sir/lirc_sir.c	Sun Aug 12 18:48:32 2001
@@ -67,6 +67,9 @@
 #include <asm/fcntl.h>
 
 #include <linux/timer.h>
+#ifdef CONFIG_DEVFS_FS
+#include <linux/devfs_fs_kernel.h>
+#endif
 
 #include "drivers/lirc.h"
 
@@ -105,6 +108,10 @@
 static int iobase = LIRC_PORT;
 static int irq = LIRC_IRQ;
 
+#ifdef CONFIG_DEVFS_FS
+static devfs_handle_t lirc_devfs;
+#endif
+
 static spinlock_t timer_lock = SPIN_LOCK_UNLOCKED;
 static struct timer_list timerlist;
 /* time of last signal change detected */
@@ -437,8 +444,15 @@
 {
 	int retval;
 
+#ifdef CONFIG_DEVFS_FS
+	lirc_devfs = devfs_register(NULL, "lirc/sir", DEVFS_FL_DEFAULT,
+				    major, 0, S_IFCHR | S_IRUSR | S_IWUSR,
+				    &lirc_fops, NULL);
+	if (lirc_devfs == NULL) {
+#else
 	retval = register_chrdev(major, LIRC_DRIVER_NAME, &lirc_fops);
 	if (retval < 0) {
+#endif
 		printk(KERN_ERR LIRC_DRIVER_NAME ": init_chrdev() failed.\n");
 		return retval;
 	}
@@ -447,7 +461,11 @@
 
 static void drop_chrdev(void)
 {
+#ifdef CONFIG_DEVFS_FS
+	devfs_unregister(lirc_devfs);
+#else
 	unregister_chrdev(major, LIRC_DRIVER_NAME);
+#endif
 }
 #endif
 
